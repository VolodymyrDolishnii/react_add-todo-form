{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","classNames","completed","title","TodoList","todos","map","getUser","userId","usersFromServer","find","App","useState","setTitle","setUserId","todoList","setTodoList","isTitle","setIsTitle","isUser","setIsUser","action","method","onSubmit","event","preventDefault","length","newTodo","Math","max","listOfTodos","addTodo","type","placeholder","value","onChange","target","userFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cdd83187.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","// Add the required types and props\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a\n    className=\"UserInfo\"\n    href={`mailto:${user.email}`}\n    data-id={user.id}\n  >\n    {user.name}\n  </a>\n);\n","// Add the required types and props\nimport React from 'react';\nimport classNames from 'classnames';\nimport { UserInfo } from '../UserInfo/UserInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => (\n  <article\n    className={\n      classNames('TodoInfo', { 'TodoInfo--completed': todo.completed })\n    }\n    data-id={todo.id}\n  >\n    <h2 className=\"TodoInfo__title\">{todo.title}</h2>\n\n    {todo.user && (<UserInfo user={todo.user} />)}\n  </article>\n);\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {\n      todos.map(todo => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))\n    }\n  </section>\n);\n","import { FormEvent, useState } from 'react';\nimport './App.scss';\n\nimport todosFromServer from './api/todos';\nimport usersFromServer from './api/users';\n\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList/TodoList';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nconst todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App = () => {\n  const [title, setTitle] = useState('');\n  const [userId, setUserId] = useState(0);\n  const [todoList, setTodoList] = useState(todos);\n  const [isTitle, setIsTitle] = useState(false);\n  const [isUser, setIsUser] = useState(false);\n\n  const generateMaxId = () => (\n    Math.max(...todoList.map(todo => todo.id)) + 1\n  );\n\n  const addTodo = () => {\n    const newTodo = {\n      id: generateMaxId(),\n      title,\n      completed: false,\n      userId,\n      user: getUser(userId),\n    };\n\n    setTodoList(listOfTodos => {\n      return [...listOfTodos, newTodo];\n    });\n  };\n\n  const handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n    if (title.length === 0) {\n      setIsTitle(true);\n    }\n\n    if (userId === 0) {\n      setIsUser(true);\n    }\n\n    if (title.length > 0\n        && userId !== 0) {\n      addTodo();\n      setTitle('');\n      setUserId(0);\n      setIsTitle(false);\n      setIsUser(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter the title\"\n            value={title}\n            onChange={(event) => {\n              const { value } = event.target;\n\n              setTitle(value);\n            }}\n          />\n          {(isTitle && title.length === 0)\n            && (<span className=\"error\">Please enter a title</span>)}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={userId}\n            onChange={(event) => {\n              const { value } = event.target;\n\n              setUserId(+value);\n            }}\n          >\n            <option value=\"0\">\n              Choose a user\n            </option>\n\n            {usersFromServer.map(userFromServer => {\n              const { id, name } = userFromServer;\n\n              return <option value={id} key={id}>{name}</option>;\n            })}\n\n          </select>\n          {(isUser && userId === 0)\n            && (\n              <span className=\"error\">\n                Please choose a user\n              </span>\n            )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todoList} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}